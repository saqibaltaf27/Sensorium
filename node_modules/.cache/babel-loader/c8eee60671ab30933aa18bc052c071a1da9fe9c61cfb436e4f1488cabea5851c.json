{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mr.Saqib\\\\OneDrive - gms-world.com\\\\Documents\\\\GitHub\\\\TempMonitoringControlPanel\\\\src\\\\components\\\\SensorDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst SensorDetails = ({\n  selectedDevice,\n  selectedSensor\n}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchSensorDetails() {\n      setLoading(true);\n      try {\n        const endpoint = selectedSensor.replace(' ', '-').toLowerCase();\n        const response = await fetch(`${API_BASE_URL}/live/${endpoint}?deviceId=${selectedDevice}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        setData(result); // The backend now returns an array of sensors\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching sensor data:\", error);\n        setLoading(false);\n        setData(null);\n      }\n    }\n    fetchSensorDetails();\n  }, [selectedDevice, selectedSensor]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-state-card\",\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n  if (!data || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-state-card\",\n      children: \"No data found for this sensor.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensor-details-container\",\n    children: data.map((sensor, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensor-details-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"card-title\",\n        children: sensor.sensorName || `${selectedSensor} ${index + 1}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-grid\",\n        children: Object.entries(sensor).map(([key, value]) => {\n          // Exclude specific fields to keep the UI clean\n          if (key === 'deviceId' || key === 'lastUpdated' || key === 'id' || key === 'sensorName') {\n            return null;\n          }\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"data-label\",\n              children: [key, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"data-value\",\n              children: String(value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorDetails, \"Zn4cs3026OJRBhxLd0Oqj+bUOXY=\");\n_c = SensorDetails;\nexport default SensorDetails;\nvar _c;\n$RefreshReg$(_c, \"SensorDetails\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","SensorDetails","selectedDevice","selectedSensor","_s","data","setData","loading","setLoading","fetchSensorDetails","endpoint","replace","toLowerCase","response","fetch","ok","Error","status","result","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","sensor","index","sensorName","Object","entries","key","value","String","_c","$RefreshReg$"],"sources":["C:/Users/Mr.Saqib/OneDrive - gms-world.com/Documents/GitHub/TempMonitoringControlPanel/src/components/SensorDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nconst SensorDetails = ({ selectedDevice, selectedSensor }) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchSensorDetails() {\r\n      setLoading(true);\r\n      try {\r\n        const endpoint = selectedSensor.replace(' ', '-').toLowerCase();\r\n        const response = await fetch(`${API_BASE_URL}/live/${endpoint}?deviceId=${selectedDevice}`);\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const result = await response.json();\r\n        setData(result); // The backend now returns an array of sensors\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching sensor data:\", error);\r\n        setLoading(false);\r\n        setData(null);\r\n      }\r\n    }\r\n    fetchSensorDetails();\r\n  }, [selectedDevice, selectedSensor]);\r\n\r\n  if (loading) {\r\n    return <div className=\"loading-state-card\">Loading data...</div>;\r\n  }\r\n\r\n  if (!data || data.length === 0) {\r\n    return <div className=\"error-state-card\">No data found for this sensor.</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"sensor-details-container\">\r\n      {data.map((sensor, index) => (\r\n        <div key={index} className=\"sensor-details-card\">\r\n          <h3 className=\"card-title\">\r\n            {sensor.sensorName || `${selectedSensor} ${index + 1}`}\r\n          </h3>\r\n          <div className=\"data-grid\">\r\n            {Object.entries(sensor).map(([key, value]) => {\r\n              // Exclude specific fields to keep the UI clean\r\n              if (key === 'deviceId' || key === 'lastUpdated' || key === 'id' || key === 'sensorName') {\r\n                return null;\r\n              }\r\n              return (\r\n                <div key={key} className=\"data-item\">\r\n                  <span className=\"data-label\">{key}:</span>\r\n                  <span className=\"data-value\">{String(value)}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SensorDetails;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}