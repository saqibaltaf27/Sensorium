{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMNA IFTIKHAR\\\\Documents\\\\GitHub\\\\Sensorium\\\\src\\\\components\\\\MainContent\\\\MainContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AllSensorsDisplay from '../AllSensorsDisplay/AllSensorsDisplay';\nimport SensorLoadingScreen from '../Loading/SensorLoadingScreen';\nimport './MainContent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'https://sensorium-api.vercel.app/api';\nconst MainContent = ({\n  selectedSensor\n}) => {\n  _s();\n  const [allSensorsData, setAllSensorsData] = useState([]);\n  const [deviceInfo, setDeviceInfo] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const fetchAllData = async () => {\n    try {\n      const endpoint = selectedSensor.replace(' ', '-').toLowerCase();\n      const [sensorsResponse, devicesResponse] = await Promise.all([fetch(`${API_BASE_URL}/live/${endpoint}`), fetch(`${API_BASE_URL}/live/devices`)]);\n      if (!sensorsResponse.ok || !devicesResponse.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      const sensorsData = await sensorsResponse.json();\n      const devicesData = await devicesResponse.json();\n      setAllSensorsData(sensorsData);\n      setDeviceInfo(devicesData);\n      setLastUpdated(new Date());\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    setLoading(true);\n    fetchAllData();\n    const intervalId = setInterval(() => {\n      fetchAllData();\n    }, 5000);\n    return () => clearInterval(intervalId);\n  }, [selectedSensor]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main-content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"main-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"header-title\",\n        children: [\"Live \", selectedSensor, \" Data\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"last-updated\",\n        children: [\"Last updated: \", lastUpdated.toLocaleTimeString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-area\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-loading\",\n        children: /*#__PURE__*/_jsxDEV(SensorLoadingScreen, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(AllSensorsDisplay, {\n        allSensorsData: allSensorsData,\n        deviceInfo: deviceInfo,\n        selectedSensor: selectedSensor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(MainContent, \"LBhXECvVNm3Wam8eecvEFXX6fTE=\");\n_c = MainContent;\nexport default MainContent;\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useState","useEffect","AllSensorsDisplay","SensorLoadingScreen","jsxDEV","_jsxDEV","API_BASE_URL","MainContent","selectedSensor","_s","allSensorsData","setAllSensorsData","deviceInfo","setDeviceInfo","loading","setLoading","lastUpdated","setLastUpdated","Date","fetchAllData","endpoint","replace","toLowerCase","sensorsResponse","devicesResponse","Promise","all","fetch","ok","Error","sensorsData","json","devicesData","error","console","intervalId","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","_c","$RefreshReg$"],"sources":["C:/Users/AMNA IFTIKHAR/Documents/GitHub/Sensorium/src/components/MainContent/MainContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport AllSensorsDisplay from '../AllSensorsDisplay/AllSensorsDisplay';\r\nimport SensorLoadingScreen from '../Loading/SensorLoadingScreen';\r\nimport './MainContent.css';\r\n\r\nconst API_BASE_URL = 'https://sensorium-api.vercel.app/api';\r\n\r\nconst MainContent = ({ selectedSensor }) => {\r\n  const [allSensorsData, setAllSensorsData] = useState([]);\r\n  const [deviceInfo, setDeviceInfo] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [lastUpdated, setLastUpdated] = useState(new Date());\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      const endpoint = selectedSensor.replace(' ', '-').toLowerCase();\r\n\r\n      const [sensorsResponse, devicesResponse] = await Promise.all([\r\n        fetch(`${API_BASE_URL}/live/${endpoint}`),\r\n        fetch(`${API_BASE_URL}/live/devices`),\r\n      ]);\r\n\r\n      if (!sensorsResponse.ok || !devicesResponse.ok) {\r\n        throw new Error('Failed to fetch data');\r\n      }\r\n\r\n      const sensorsData = await sensorsResponse.json();\r\n      const devicesData = await devicesResponse.json();\r\n\r\n      setAllSensorsData(sensorsData);\r\n      setDeviceInfo(devicesData);\r\n      setLastUpdated(new Date());\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchAllData();\r\n\r\n    const intervalId = setInterval(() => {\r\n      fetchAllData();\r\n    }, 5000);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [selectedSensor]);\r\n\r\n  return (\r\n    <main className=\"main-content-container\">\r\n      <header className=\"main-header\">\r\n        <h2 className=\"header-title\">Live {selectedSensor} Data</h2>\r\n        <span className=\"last-updated\">\r\n          Last updated: {lastUpdated.toLocaleTimeString()}\r\n        </span>\r\n      </header>\r\n\r\n      <div className=\"content-area\">\r\n        {loading ? (\r\n          <div className=\"inline-loading\">\r\n            <SensorLoadingScreen />\r\n          </div>\r\n        ) : (\r\n          <AllSensorsDisplay\r\n            allSensorsData={allSensorsData}\r\n            deviceInfo={deviceInfo}\r\n            selectedSensor={selectedSensor}\r\n          />\r\n        )}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}