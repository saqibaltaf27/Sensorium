{"ast":null,"code":"var _jsxFileName = \"E:\\\\Python\\\\TSensor\\\\tempmonitoring\\\\src\\\\components\\\\SensorChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './SensorChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_HISTORY_URL = 'http://127.0.0.1:5000/api/sensor-history';\nconst COLORS = {\n  temperature: '#00509d',\n  humidity: '#007ba7'\n};\nconst SensorChart = ({\n  sensorName,\n  timeRange\n}) => {\n  _s();\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    const fetchHistory = async () => {\n      try {\n        const url = `${API_HISTORY_URL}?sensor_name=${sensorName}&time_range=${timeRange}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        setHistory(data);\n      } catch (error) {\n        console.error(\"Failed to fetch history:\", error);\n      }\n    };\n    fetchHistory();\n  }, [sensorName, timeRange]);\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    if (timeRange === 'daily') {\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } else if (timeRange === 'weekly') {\n      return date.toLocaleDateString([], {\n        weekday: 'short'\n      });\n    } else {\n      return date.toLocaleDateString([], {\n        month: 'short',\n        day: 'numeric'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensor-chart-container\",\n    children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 250,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: history,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\",\n          stroke: \"#e0e0e0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\",\n          tickFormatter: formatTimestamp,\n          stroke: \"#bdbdbd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          stroke: \"#bdbdbd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          wrapperStyle: {\n            paddingTop: '10px',\n            fontSize: '12px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"temperature\",\n          stroke: COLORS.temperature,\n          name: \"Temperature\",\n          strokeWidth: 2,\n          dot: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"humidity\",\n          stroke: COLORS.humidity,\n          name: \"Humidity\",\n          strokeWidth: 2,\n          dot: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorChart, \"PUqjgfw0ccPwtx6QxD6fWqJYeMQ=\");\n_c = SensorChart;\nexport default SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","API_HISTORY_URL","COLORS","temperature","humidity","SensorChart","sensorName","timeRange","_s","history","setHistory","fetchHistory","url","response","fetch","data","json","error","console","formatTimestamp","timestamp","date","Date","toLocaleTimeString","hour","minute","toLocaleDateString","weekday","month","day","className","children","width","height","strokeDasharray","stroke","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","tickFormatter","wrapperStyle","paddingTop","fontSize","type","name","strokeWidth","dot","_c","$RefreshReg$"],"sources":["E:/Python/TSensor/tempmonitoring/src/components/SensorChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport './SensorChart.css';\r\n\r\nconst API_HISTORY_URL = 'http://127.0.0.1:5000/api/sensor-history';\r\nconst COLORS = {\r\n  temperature: '#00509d',\r\n  humidity: '#007ba7',\r\n};\r\n\r\nconst SensorChart = ({ sensorName, timeRange }) => {\r\n  const [history, setHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchHistory = async () => {\r\n      try {\r\n        const url = `${API_HISTORY_URL}?sensor_name=${sensorName}&time_range=${timeRange}`;\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        setHistory(data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch history:\", error);\r\n      }\r\n    };\r\n    fetchHistory();\r\n  }, [sensorName, timeRange]);\r\n\r\n  const formatTimestamp = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    if (timeRange === 'daily') {\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } else if (timeRange === 'weekly') {\r\n      return date.toLocaleDateString([], { weekday: 'short' });\r\n    } else {\r\n      return date.toLocaleDateString([], { month: 'short', day: 'numeric' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sensor-chart-container\">\r\n      <ResponsiveContainer width=\"100%\" height={250}>\r\n        <LineChart data={history}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e0e0e0\" />\r\n          <XAxis dataKey=\"timestamp\" tickFormatter={formatTimestamp} stroke=\"#bdbdbd\" />\r\n          <YAxis stroke=\"#bdbdbd\" />\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ paddingTop: '10px', fontSize: '12px' }} />\r\n          <Line type=\"monotone\" dataKey=\"temperature\" stroke={COLORS.temperature} name=\"Temperature\" strokeWidth={2} dot={false} />\r\n          <Line type=\"monotone\" dataKey=\"humidity\" stroke={COLORS.humidity} name=\"Humidity\" strokeWidth={2} dot={false} />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SensorChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}