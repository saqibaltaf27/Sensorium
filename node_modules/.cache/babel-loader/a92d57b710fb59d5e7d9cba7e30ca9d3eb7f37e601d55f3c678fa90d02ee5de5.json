{"ast":null,"code":"var _jsxFileName = \"E:\\\\Python\\\\TSensor\\\\tempmonitoring\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from './components/Sidebar';\nimport SensorSummary from './components/SensorSummary';\nimport SensorChart from './components/SensorChart';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_LATEST_URL = 'http://127.0.0.1:5000/api/sensor-data';\nconst Dashboard = () => {\n  _s();\n  const [sensorData, setSensorData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [activeRange, setActiveRange] = useState('daily');\n  const [error, setError] = useState(null);\n\n  // Define the desired order of sensors\n  const sensorOrder = ['Main Hall 1st', 'Cold Room 1', 'Cold Room 2', 'Cold Room 3', 'LDS Wh 15 - 25', 'Cold Room LDS/DGR', 'Freezer 2', 'Freezer 3'];\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(API_LATEST_URL);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Sort the fetched data according to the predefined order\n        const sortedData = sensorOrder.map(name => data.find(sensor => sensor.sensor_name === name)).filter(sensor => sensor !== undefined); // Remove any sensors not found\n\n        setSensorData(sortedData);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, []); // The empty dependency array ensures this effect runs only once\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading sensor data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      activeRange: activeRange,\n      setActiveRange: setActiveRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"main-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"main-title\",\n          children: \"Sensor Metrics Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"main-subtitle\",\n          children: [\"Historical data for the past \", activeRange]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-grid\",\n        children: sensorData.map(sensor => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dashboard-card\",\n          children: [/*#__PURE__*/_jsxDEV(SensorSummary, {\n            sensor: sensor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(SensorChart, {\n            sensorName: sensor.sensor_name,\n            timeRange: activeRange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)]\n        }, sensor.sensor_name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"4AxHiExqC6MrqWF+ncEIgATAIeI=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","SensorSummary","SensorChart","jsxDEV","_jsxDEV","API_LATEST_URL","Dashboard","_s","sensorData","setSensorData","loading","setLoading","activeRange","setActiveRange","error","setError","sensorOrder","fetchData","response","fetch","ok","Error","status","data","json","sortedData","map","name","find","sensor","sensor_name","filter","undefined","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","sensorName","timeRange","_c","$RefreshReg$"],"sources":["E:/Python/TSensor/tempmonitoring/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Sidebar from './components/Sidebar';\r\nimport SensorSummary from './components/SensorSummary';\r\nimport SensorChart from './components/SensorChart';\r\nimport './Dashboard.css';\r\n\r\nconst API_LATEST_URL = 'http://127.0.0.1:5000/api/sensor-data';\r\n\r\nconst Dashboard = () => {\r\n  const [sensorData, setSensorData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [activeRange, setActiveRange] = useState('daily');\r\n  const [error, setError] = useState(null);\r\n\r\n  // Define the desired order of sensors\r\n  const sensorOrder = [\r\n    'Main Hall 1st',\r\n    'Cold Room 1',\r\n    'Cold Room 2',\r\n    'Cold Room 3',\r\n    'LDS Wh 15 - 25',\r\n    'Cold Room LDS/DGR',\r\n    'Freezer 2',\r\n    'Freezer 3',\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(API_LATEST_URL);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        \r\n        // Sort the fetched data according to the predefined order\r\n        const sortedData = sensorOrder\r\n          .map(name => data.find(sensor => sensor.sensor_name === name))\r\n          .filter(sensor => sensor !== undefined); // Remove any sensors not found\r\n          \r\n        setSensorData(sortedData);\r\n      } catch (error) {\r\n        setError(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []); // The empty dependency array ensures this effect runs only once\r\n\r\n  if (loading) return <div className=\"loading\">Loading sensor data...</div>;\r\n  if (error) return <div className=\"error\">Error: {error.message}</div>;\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Sidebar activeRange={activeRange} setActiveRange={setActiveRange} />\r\n      <div className=\"main-content\">\r\n        <header className=\"main-header\">\r\n          <h1 className=\"main-title\">Sensor Metrics Dashboard</h1>\r\n          <p className=\"main-subtitle\">Historical data for the past {activeRange}</p>\r\n        </header>\r\n        <div className=\"dashboard-grid\">\r\n          {sensorData.map(sensor => (\r\n            <div key={sensor.sensor_name} className=\"dashboard-card\">\r\n              <SensorSummary sensor={sensor} />\r\n              <SensorChart sensorName={sensor.sensor_name} timeRange={activeRange} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}