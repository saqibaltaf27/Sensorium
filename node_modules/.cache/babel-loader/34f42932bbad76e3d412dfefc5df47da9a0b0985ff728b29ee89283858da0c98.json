{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api'; // Ensure this matches your backend URL\n\n/**\r\n * Fetches the list of all live devices.\r\n * @returns {Promise<Array>} A promise that resolves to an array of device objects.\r\n */\nexport async function fetchLiveDevices() {\n  const response = await fetch(`${API_BASE_URL}/live/devices`);\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  return await response.json();\n}\n\n/**\r\n * Fetches the latest data for a specific sensor type.\r\n * @param {string} sensorType The type of sensor (e.g., 'DigitalSensors').\r\n * @param {string} deviceId The ID of the device.\r\n * @returns {Promise<Array>} A promise that resolves to an array of data.\r\n */\nexport async function fetchSensorData(sensorType, deviceId) {\n  const endpoint = sensorType.replace(' ', '-').toLowerCase();\n  const response = await fetch(`${API_BASE_URL}/live/${endpoint}?deviceId=${deviceId}`);\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  return await response.json();\n}","map":{"version":3,"names":["API_BASE_URL","fetchLiveDevices","response","fetch","ok","Error","status","json","fetchSensorData","sensorType","deviceId","endpoint","replace","toLowerCase"],"sources":["C:/Users/Mr.Saqib/OneDrive - gms-world.com/Documents/GitHub/TempMonitoringControlPanel/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api'; // Ensure this matches your backend URL\r\n\r\n/**\r\n * Fetches the list of all live devices.\r\n * @returns {Promise<Array>} A promise that resolves to an array of device objects.\r\n */\r\nexport async function fetchLiveDevices() {\r\n  const response = await fetch(`${API_BASE_URL}/live/devices`);\r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! Status: ${response.status}`);\r\n  }\r\n  return await response.json();\r\n}\r\n\r\n/**\r\n * Fetches the latest data for a specific sensor type.\r\n * @param {string} sensorType The type of sensor (e.g., 'DigitalSensors').\r\n * @param {string} deviceId The ID of the device.\r\n * @returns {Promise<Array>} A promise that resolves to an array of data.\r\n */\r\nexport async function fetchSensorData(sensorType, deviceId) {\r\n  const endpoint = sensorType.replace(' ', '-').toLowerCase();\r\n  const response = await fetch(`${API_BASE_URL}/live/${endpoint}?deviceId=${deviceId}`);\r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! Status: ${response.status}`);\r\n  }\r\n  return await response.json();\r\n}"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B,CAAC,CAAC;;AAElD;AACA;AACA;AACA;AACA,OAAO,eAAeC,gBAAgBA,CAAA,EAAG;EACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,eAAe,CAAC;EAC5D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;EAC3D;EACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,eAAeA,CAACC,UAAU,EAAEC,QAAQ,EAAE;EAC1D,MAAMC,QAAQ,GAAGF,UAAU,CAACG,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC;EAC3D,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,SAASW,QAAQ,aAAaD,QAAQ,EAAE,CAAC;EACrF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;EAC3D;EACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}