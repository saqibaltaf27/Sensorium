{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mr.Saqib\\\\OneDrive - gms-world.com\\\\Documents\\\\GitHub\\\\TempMonitoringControlPanel\\\\src\\\\components\\\\MainContent\\\\MainContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AllSensorsDisplay from '../AllSensorsDisplay/AllSensorsDisplay';\nimport SensorLoadingScreen from '../SensorLoadingScreen'; // Add this import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst MainContent = ({\n  selectedSensor\n}) => {\n  _s();\n  const [allSensorsData, setAllSensorsData] = useState([]);\n  const [deviceInfo, setDeviceInfo] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchAllData() {\n      setLoading(true);\n      try {\n        const endpoint = selectedSensor.replace(' ', '-').toLowerCase();\n        const [sensorsResponse, devicesResponse] = await Promise.all([fetch(`${API_BASE_URL}/live/${endpoint}`), fetch(`${API_BASE_URL}/live/devices`)]);\n        if (!sensorsResponse.ok || !devicesResponse.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const sensorsData = await sensorsResponse.json();\n        const devicesData = await devicesResponse.json();\n        setAllSensorsData(sensorsData);\n        setDeviceInfo(devicesData);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchAllData();\n  }, [selectedSensor]); // Refetch data when selectedSensor changes\n\n  // Add the new loading screen component here\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(SensorLoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"main-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"header-title\",\n        children: [\"Live \", selectedSensor, \" Data\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"last-updated\",\n        children: [\"Last updated: \", new Date().toLocaleTimeString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-area\",\n      children: /*#__PURE__*/_jsxDEV(AllSensorsDisplay, {\n        allSensorsData: allSensorsData,\n        deviceInfo: deviceInfo,\n        selectedSensor: selectedSensor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(MainContent, \"XSaUPqeDbdHDQcREQPcZCnsILiw=\");\n_c = MainContent;\nexport default MainContent;\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useState","useEffect","AllSensorsDisplay","SensorLoadingScreen","jsxDEV","_jsxDEV","API_BASE_URL","MainContent","selectedSensor","_s","allSensorsData","setAllSensorsData","deviceInfo","setDeviceInfo","loading","setLoading","fetchAllData","endpoint","replace","toLowerCase","sensorsResponse","devicesResponse","Promise","all","fetch","ok","Error","sensorsData","json","devicesData","error","console","fileName","_jsxFileName","lineNumber","columnNumber","className","children","Date","toLocaleTimeString","_c","$RefreshReg$"],"sources":["C:/Users/Mr.Saqib/OneDrive - gms-world.com/Documents/GitHub/TempMonitoringControlPanel/src/components/MainContent/MainContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport AllSensorsDisplay from '../AllSensorsDisplay/AllSensorsDisplay';\r\nimport SensorLoadingScreen from '../SensorLoadingScreen'; // Add this import\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nconst MainContent = ({ selectedSensor }) => {\r\n  const [allSensorsData, setAllSensorsData] = useState([]);\r\n  const [deviceInfo, setDeviceInfo] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchAllData() {\r\n      setLoading(true);\r\n      try {\r\n        const endpoint = selectedSensor.replace(' ', '-').toLowerCase();\r\n\r\n        const [sensorsResponse, devicesResponse] = await Promise.all([\r\n          fetch(`${API_BASE_URL}/live/${endpoint}`),\r\n          fetch(`${API_BASE_URL}/live/devices`),\r\n        ]);\r\n\r\n        if (!sensorsResponse.ok || !devicesResponse.ok) {\r\n          throw new Error('Failed to fetch data');\r\n        }\r\n\r\n        const sensorsData = await sensorsResponse.json();\r\n        const devicesData = await devicesResponse.json();\r\n\r\n        setAllSensorsData(sensorsData);\r\n        setDeviceInfo(devicesData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchAllData();\r\n  }, [selectedSensor]); // Refetch data when selectedSensor changes\r\n\r\n  // Add the new loading screen component here\r\n  if (loading) {\r\n    return <SensorLoadingScreen />;\r\n  }\r\n\r\n  return (\r\n    <main className=\"main-content\">\r\n      <header className=\"main-header\">\r\n        <h2 className=\"header-title\">Live {selectedSensor} Data</h2>\r\n        <span className=\"last-updated\">Last updated: {new Date().toLocaleTimeString()}</span>\r\n      </header>\r\n      <div className=\"content-area\">\r\n        <AllSensorsDisplay allSensorsData={allSensorsData} deviceInfo={deviceInfo} selectedSensor={selectedSensor} />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainContent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}