{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mr.Saqib\\\\OneDrive - gms-world.com\\\\Documents\\\\GitHub\\\\TempMonitoringControlPanel\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from './components/Sidebar';\nimport MainContent from './components/MainContent';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst App = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [deviceInfo, setDeviceInfo] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(null);\n  const [selectedSensor, setSelectedSensor] = useState(null);\n  useEffect(() => {\n    async function fetchDevices() {\n      try {\n        const response = await fetch(`${API_BASE_URL}/live/devices`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch devices');\n        }\n        const data = await response.json();\n        setDeviceInfo(data);\n        if (data.length > 0) {\n          setSelectedDevice(data[0].deviceId);\n        }\n      } catch (error) {\n        console.error(\"Error fetching devices:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchDevices();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-text\",\n        children: \"Loading Dashboard...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      deviceInfo: deviceInfo,\n      selectedDevice: selectedDevice,\n      setSelectedDevice: setSelectedDevice,\n      setSelectedSensor: setSelectedSensor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      selectedDevice: selectedDevice,\n      selectedSensor: selectedSensor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"I0v2zghypiMCxkOJ3gJt8mK6RqY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","MainContent","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","loading","setLoading","deviceInfo","setDeviceInfo","selectedDevice","setSelectedDevice","selectedSensor","setSelectedSensor","fetchDevices","response","fetch","ok","Error","data","json","length","deviceId","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Mr.Saqib/OneDrive - gms-world.com/Documents/GitHub/TempMonitoringControlPanel/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Sidebar from './components/Sidebar';\nimport MainContent from './components/MainContent';\nimport './styles.css';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [deviceInfo, setDeviceInfo] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(null);\n  const [selectedSensor, setSelectedSensor] = useState(null);\n\n  useEffect(() => {\n    async function fetchDevices() {\n      try {\n        const response = await fetch(`${API_BASE_URL}/live/devices`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch devices');\n        }\n        const data = await response.json();\n        setDeviceInfo(data);\n        if (data.length > 0) {\n          setSelectedDevice(data[0].deviceId);\n        }\n      } catch (error) {\n        console.error(\"Error fetching devices:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchDevices();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"loading-overlay\">\n        <div className=\"loading-spinner\"></div>\n        <div className=\"loading-text\">Loading Dashboard...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard-container\">\n      <Sidebar\n        deviceInfo={deviceInfo}\n        selectedDevice={selectedDevice}\n        setSelectedDevice={setSelectedDevice}\n        setSelectedSensor={setSelectedSensor}\n      />\n      <MainContent\n        selectedDevice={selectedDevice}\n        selectedSensor={selectedSensor}\n      />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACd,eAAegB,YAAYA,CAAA,EAAG;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,YAAY,eAAe,CAAC;QAC5D,IAAI,CAACY,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;QAC5C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCX,aAAa,CAACU,IAAI,CAAC;QACnB,IAAIA,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;UACnBV,iBAAiB,CAACQ,IAAI,CAAC,CAAC,CAAC,CAACG,QAAQ,CAAC;QACrC;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,SAAS;QACRhB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;IACAO,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIR,OAAO,EAAE;IACX,oBACEJ,OAAA;MAAKuB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BxB,OAAA;QAAKuB,SAAS,EAAC;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACvC5B,OAAA;QAAKuB,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC;EAEV;EAEA,oBACE5B,OAAA;IAAKuB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCxB,OAAA,CAACH,OAAO;MACNS,UAAU,EAAEA,UAAW;MACvBE,cAAc,EAAEA,cAAe;MAC/BC,iBAAiB,EAAEA,iBAAkB;MACrCE,iBAAiB,EAAEA;IAAkB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACF5B,OAAA,CAACF,WAAW;MACVU,cAAc,EAAEA,cAAe;MAC/BE,cAAc,EAAEA;IAAe;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACzB,EAAA,CAlDID,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAoDT,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}