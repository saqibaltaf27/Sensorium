{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMNA IFTIKHAR\\\\Documents\\\\GitHub\\\\Sensorium\\\\src\\\\components\\\\MainContent\\\\MainContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport AllSensorsDisplay from \"../AllSensorsDisplay/AllSensorsDisplay\";\nimport SensorLoadingScreen from \"../Loading/SensorLoadingScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = \"https://sensorium-api.vercel.app/api\";\nconst MainContent = ({\n  selectedSensor\n}) => {\n  _s();\n  const [allSensorsData, setAllSensorsData] = useState([]);\n  const [deviceInfo, setDeviceInfo] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const fetchAllData = async () => {\n    try {\n      const endpoint = selectedSensor.replace(\" \", \"-\").toLowerCase();\n      const [sensorsRes, devicesRes] = await Promise.all([fetch(`${API_BASE_URL}/live/${endpoint}`), fetch(`${API_BASE_URL}/live/devices`)]);\n      if (!sensorsRes.ok || !devicesRes.ok) throw new Error(\"Failed to fetch\");\n      const sensorsData = await sensorsRes.json();\n      const devicesData = await devicesRes.json();\n      setAllSensorsData(sensorsData);\n      setDeviceInfo(devicesData);\n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error(\"Error fetching data:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    setLoading(true);\n    fetchAllData();\n    const id = setInterval(fetchAllData, 5000);\n    return () => clearInterval(id);\n  }, [selectedSensor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-gray-800\",\n        children: [\"Live \", selectedSensor, \" Data\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-sm text-gray-500\",\n        children: [\"Last updated:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-medium\",\n          children: [\"  \", lastUpdated.toLocaleTimeString([], {\n            hour: 'numeric',\n            minute: '2-digit',\n            hour12: true\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-64\",\n      children: /*#__PURE__*/_jsxDEV(SensorLoadingScreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(AllSensorsDisplay, {\n      allSensorsData: allSensorsData,\n      deviceInfo: deviceInfo,\n      selectedSensor: selectedSensor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(MainContent, \"LBhXECvVNm3Wam8eecvEFXX6fTE=\");\n_c = MainContent;\nexport default MainContent;\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useState","useEffect","AllSensorsDisplay","SensorLoadingScreen","jsxDEV","_jsxDEV","API_BASE_URL","MainContent","selectedSensor","_s","allSensorsData","setAllSensorsData","deviceInfo","setDeviceInfo","loading","setLoading","lastUpdated","setLastUpdated","Date","fetchAllData","endpoint","replace","toLowerCase","sensorsRes","devicesRes","Promise","all","fetch","ok","Error","sensorsData","json","devicesData","err","console","error","id","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","hour","minute","hour12","_c","$RefreshReg$"],"sources":["C:/Users/AMNA IFTIKHAR/Documents/GitHub/Sensorium/src/components/MainContent/MainContent.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport AllSensorsDisplay from \"../AllSensorsDisplay/AllSensorsDisplay\";\r\nimport SensorLoadingScreen from \"../Loading/SensorLoadingScreen\";\r\n\r\nconst API_BASE_URL = \"https://sensorium-api.vercel.app/api\";\r\n\r\nconst MainContent = ({ selectedSensor }) => {\r\n  const [allSensorsData, setAllSensorsData] = useState([]);\r\n  const [deviceInfo, setDeviceInfo] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [lastUpdated, setLastUpdated] = useState(new Date());\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      const endpoint = selectedSensor.replace(\" \", \"-\").toLowerCase();\r\n      const [sensorsRes, devicesRes] = await Promise.all([\r\n        fetch(`${API_BASE_URL}/live/${endpoint}`),\r\n        fetch(`${API_BASE_URL}/live/devices`),\r\n      ]);\r\n\r\n      if (!sensorsRes.ok || !devicesRes.ok) throw new Error(\"Failed to fetch\");\r\n\r\n      const sensorsData = await sensorsRes.json();\r\n      const devicesData = await devicesRes.json();\r\n\r\n      setAllSensorsData(sensorsData);\r\n      setDeviceInfo(devicesData);\r\n      setLastUpdated(new Date());\r\n    } catch (err) {\r\n      console.error(\"Error fetching data:\", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchAllData();\r\n    const id = setInterval(fetchAllData, 5000);\r\n    return () => clearInterval(id);\r\n  }, [selectedSensor]);\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8\">\r\n        <h2 className=\"text-2xl font-bold text-gray-800\">\r\n          Live {selectedSensor} Data\r\n        </h2>\r\n        <span className=\"text-sm text-gray-500\">\r\n          Last updated:{\" \"}\r\n          <span className=\"font-medium\">  {lastUpdated.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit', hour12: true })}\r\n        </span>\r\n        </span>\r\n      </div>\r\n\r\n      {/* Content */}\r\n      {loading ? (\r\n        <div className=\"flex justify-center items-center h-64\">\r\n          <SensorLoadingScreen />\r\n        </div>\r\n      ) : (\r\n        <AllSensorsDisplay\r\n          allSensorsData={allSensorsData}\r\n          deviceInfo={deviceInfo}\r\n          selectedSensor={selectedSensor}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}