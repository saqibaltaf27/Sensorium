{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mr.Saqib\\\\OneDrive - gms-world.com\\\\Documents\\\\GitHub\\\\TempMonitoringControlPanel\\\\src\\\\components\\\\MainContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SensorDetails from './SensorDetails';\nimport AllSensorsDisplay from './AllSensorsDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst MainContent = ({\n  selectedDevice,\n  selectedSensor\n}) => {\n  _s();\n  const [allSensorsData, setAllSensorsData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchAllSensors() {\n      try {\n        const response = await fetch(`${API_BASE_URL}/live/digital-sensors`);\n        if (!response.ok) throw new Error('Failed to fetch all live digital sensors');\n        const data = await response.json();\n        setAllSensorsData(data);\n      } catch (error) {\n        console.error(\"Error fetching all sensors:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchAllSensors();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"main-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"header-title\",\n        children: \"Live Sensor Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"last-updated\",\n        children: [\"Last updated: \", new Date().toLocaleTimeString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-area\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state-card\",\n        children: \"Loading live data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(AllSensorsDisplay, {\n        allSensorsData: allSensorsData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(MainContent, \"/fR87GUIka2XCk9gnnn6L+UmFtw=\");\n_c = MainContent;\nexport default MainContent;\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useState","useEffect","SensorDetails","AllSensorsDisplay","jsxDEV","_jsxDEV","API_BASE_URL","MainContent","selectedDevice","selectedSensor","_s","allSensorsData","setAllSensorsData","loading","setLoading","fetchAllSensors","response","fetch","ok","Error","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Date","toLocaleTimeString","_c","$RefreshReg$"],"sources":["C:/Users/Mr.Saqib/OneDrive - gms-world.com/Documents/GitHub/TempMonitoringControlPanel/src/components/MainContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SensorDetails from './SensorDetails';\r\nimport AllSensorsDisplay from './AllSensorsDisplay'; \r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nconst MainContent = ({ selectedDevice, selectedSensor }) => {\r\n  const [allSensorsData, setAllSensorsData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchAllSensors() {\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/live/digital-sensors`);\r\n        if (!response.ok) throw new Error('Failed to fetch all live digital sensors');\r\n        const data = await response.json();\r\n        setAllSensorsData(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching all sensors:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchAllSensors();\r\n  }, []);\r\n\r\n  return (\r\n    <main className=\"main-content\">\r\n      <header className=\"main-header\">\r\n        <h2 className=\"header-title\">Live Sensor Data</h2>\r\n        <span className=\"last-updated\">Last updated: {new Date().toLocaleTimeString()}</span>\r\n      </header>\r\n      <div className=\"content-area\">\r\n        {loading ? (\r\n          <div className=\"loading-state-card\">Loading live data...</div>\r\n        ) : (\r\n          <AllSensorsDisplay allSensorsData={allSensorsData} />\r\n        )}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainContent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,iBAAiB,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,WAAW,GAAGA,CAAC;EAAEC,cAAc;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,eAAec,eAAeA,CAAA,EAAG;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,YAAY,uBAAuB,CAAC;QACpE,IAAI,CAACU,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;QAC7E,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCT,iBAAiB,CAACQ,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;IACAC,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEV,OAAA;IAAMmB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC5BpB,OAAA;MAAQmB,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC7BpB,OAAA;QAAImB,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClDxB,OAAA;QAAMmB,SAAS,EAAC,cAAc;QAAAC,QAAA,GAAC,gBAAc,EAAC,IAAIK,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/E,CAAC,eACTxB,OAAA;MAAKmB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1BZ,OAAO,gBACNR,OAAA;QAAKmB,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,gBAE9DxB,OAAA,CAACF,iBAAiB;QAACQ,cAAc,EAAEA;MAAe;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IACrD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEX,CAAC;AAACnB,EAAA,CAnCIH,WAAW;AAAAyB,EAAA,GAAXzB,WAAW;AAqCjB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}