{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mr.Saqib\\\\OneDrive - gms-world.com\\\\Documents\\\\GitHub\\\\TempMonitoringControlPanel\\\\src\\\\components\\\\MainContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MainContent.css'; // For styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContent = ({\n  sensorType\n}) => {\n  _s();\n  const [sensorData, setSensorData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setLoading(true);\n    setError(null);\n    // Simulate an API call or data fetch based on the sensorType\n    const fetchData = async () => {\n      try {\n        const response = await new Promise(resolve => setTimeout(() => {\n          const data = {\n            'Digital Sensors': [{\n              id: 1,\n              name: 'Door Sensor',\n              status: 'Open'\n            }],\n            'Analog Sensors': [{\n              id: 2,\n              name: 'Temperature Sensor',\n              value: '25°C'\n            }],\n            'Switch Sensors': [{\n              id: 3,\n              name: 'Light Switch',\n              status: 'Off'\n            }],\n            'Internal Relays': [{\n              id: 4,\n              name: 'Internal Relay 1',\n              status: 'Active'\n            }],\n            'External Relays': [{\n              id: 5,\n              name: 'External Relay 1',\n              status: 'Inactive'\n            }],\n            'Power Sensors': [{\n              id: 6,\n              name: 'Power Meter',\n              value: '120V'\n            }]\n          };\n          resolve(data[sensorType] || []);\n        }, 500));\n        setSensorData(response);\n      } catch (err) {\n        setError(\"Failed to fetch data.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [sensorType]); // Re-run effect when sensorType changes\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: sensorType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), sensorData.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"sensor-list\",\n      children: sensorData.map(sensor => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"sensor-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: sensor.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this), Object.entries(sensor).map(([key, value]) => key !== 'id' && key !== 'name' && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [key.charAt(0).toUpperCase() + key.slice(1), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 32\n          }, this), \" \", value]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 19\n        }, this))]\n      }, sensor.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available for this sensor type.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(MainContent, \"YSwmZXZcWPwOLCr5dzERDfA/OZ8=\");\n_c = MainContent;\nexport default MainContent;\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MainContent","sensorType","_s","sensorData","setSensorData","loading","setLoading","error","setError","fetchData","response","Promise","resolve","setTimeout","data","id","name","status","value","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","sensor","Object","entries","key","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["C:/Users/Mr.Saqib/OneDrive - gms-world.com/Documents/GitHub/TempMonitoringControlPanel/src/components/MainContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MainContent.css'; // For styling\r\n\r\nconst MainContent = ({ sensorType }) => {\r\n  const [sensorData, setSensorData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError(null);\r\n    // Simulate an API call or data fetch based on the sensorType\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await new Promise(resolve => \r\n          setTimeout(() => {\r\n            const data = {\r\n              'Digital Sensors': [{ id: 1, name: 'Door Sensor', status: 'Open' }],\r\n              'Analog Sensors': [{ id: 2, name: 'Temperature Sensor', value: '25°C' }],\r\n              'Switch Sensors': [{ id: 3, name: 'Light Switch', status: 'Off' }],\r\n              'Internal Relays': [{ id: 4, name: 'Internal Relay 1', status: 'Active' }],\r\n              'External Relays': [{ id: 5, name: 'External Relay 1', status: 'Inactive' }],\r\n              'Power Sensors': [{ id: 6, name: 'Power Meter', value: '120V' }],\r\n            };\r\n            resolve(data[sensorType] || []);\r\n          }, 500)\r\n        );\r\n        setSensorData(response);\r\n      } catch (err) {\r\n        setError(\"Failed to fetch data.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [sensorType]); // Re-run effect when sensorType changes\r\n\r\n  if (loading) return <div className=\"loading\">Loading...</div>;\r\n  if (error) return <div className=\"error\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"main-content-container\">\r\n      <h2>{sensorType}</h2>\r\n      {sensorData.length > 0 ? (\r\n        <ul className=\"sensor-list\">\r\n          {sensorData.map(sensor => (\r\n            <li key={sensor.id} className=\"sensor-card\">\r\n              <h3>{sensor.name}</h3>\r\n              {Object.entries(sensor).map(([key, value]) => (\r\n                key !== 'id' && key !== 'name' && (\r\n                  <p key={key}><strong>{key.charAt(0).toUpperCase() + key.slice(1)}:</strong> {value}</p>\r\n                )\r\n              ))}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No data available for this sensor type.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainContent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}